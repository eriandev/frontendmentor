import{i as inputStep3,a as inputStep2,b as inputStep1,s as storage,T as THEME_STORAGE,k as keypadList,$,c as $inputDisplay,d as $$,I as INPUT_SWITCH_SELECTOR,e as $keyButtons}from"./Layout.astro_astro_type_script_index_1_lang.Cv-opY5Y.js";const inputSteps={1:inputStep1,2:inputStep2,3:inputStep3};function switchTheme(e){const{body:t}=document;t.classList.remove("theme-1","theme-2","theme-3"),t.classList.add("theme-"+e),inputSteps[e]?.click(),storage.set(THEME_STORAGE,e)}let isOperationUsed=!1;function getLastNumber(e){const t=e.split(/[+\-*/]/);return t[t.length-1]}function getResult($inputDisplay){const result=eval($inputDisplay.value),resultHavePoint=!!/\./.exec(result.toString());return resultHavePoint?result.toFixed(3):result.toString()}function handleBackspace(e){e.value=e.value.slice(0,-1)}function handleDelete(e){e.value="",isOperationUsed=!1}function handleDigit(e,t){const a=getLastNumber(e.value);e.value=a==="0"?e.value.slice(0,-1)+t:e.value+t,isOperationUsed=!1}function handleEnter(e){isOperationUsed=!1,e.value===""?e.value="0":e.value=getResult(e)}function handleOperation(e,t){updateOperation(e,t)}function matchesKeyOrCode(e,t,a){const s=Array.isArray(a);return t===e.key||s&&a.includes(e.code)}function updateOperation(e,t){isOperationUsed&&(e.value=e.value.slice(0,-1)),e.value.length>0&&(e.value+=t),isOperationUsed=!0}function updateValueWithPoint(e){const t=getLastNumber(e.value),a=!!/\./.exec(t),s=t==="";a||(e.value=s?e.value+"0.":e.value+".",isOperationUsed=!1)}function updateInputDisplay(e){const t=!Number.isNaN(Number(e));if($inputDisplay!=null){switch(e){case"NumpadMultiply":case"KeyX":case"X":case"x":case"*":handleOperation($inputDisplay,"*");break;case"NumpadDivide":case"/":handleOperation($inputDisplay,"/");break;case"NumpadAdd":case"+":handleOperation($inputDisplay,"+");break;case"NumpadSubtract":case"-":handleOperation($inputDisplay,"-");break;case"NumpadDecimal":case".":updateValueWithPoint($inputDisplay);break;case"Backspace":handleBackspace($inputDisplay);break;case"Delete":handleDelete($inputDisplay);break;case"Enter":handleEnter($inputDisplay);break;default:t&&handleDigit($inputDisplay,e)}$inputDisplay.scrollLeft=$inputDisplay.scrollWidth}}function updateKeyActive(e,t){try{const a=keypadList.find(({key:s,code:i})=>matchesKeyOrCode(e,s,i));a!=null&&$(`#key-${a.key}`)?.classList[t]("active")}catch(a){console.error(a)}}const themeNumber=storage.get(THEME_STORAGE),inputRadioList=$$(INPUT_SWITCH_SELECTOR);function getValidThemeNumber(e){const t=Number(e);return t===1||t===2||t===3?t:1}document.addEventListener("DOMContentLoaded",()=>{themeNumber!=null&&switchTheme(getValidThemeNumber(themeNumber)),document.addEventListener("keydown",e=>{updateKeyActive(e,"add")}),document.addEventListener("keyup",e=>{updateKeyActive(e,"remove"),updateInputDisplay(e.key)}),$keyButtons.forEach(e=>{e.addEventListener("click",t=>{const{id:a}=t.currentTarget,s=a.replace("key-","");updateInputDisplay(s)})}),inputRadioList.forEach(e=>{e.addEventListener("input",()=>{switchTheme(getValidThemeNumber(e.value))})})});
